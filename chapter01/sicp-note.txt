程序设计的基本元素 P21

1 基本表达形式
用于表示语言所关心的最简单的个体

2 组合的方法
通过它们可以从较简单的东西出发构造出复合的元素

3 抽象的方法
通过它们可以给复合对象命名，并将它们作为单元去操作


程序设计中处理的两种对象，过程和数据。
非形式的说，数据是一种我们希望去操作的东西，而过程就是有关操作这些数据的规则的描述


LISP 中简单的数值数据

(+ 137 349)
组合式：用基本过程的表达形式和数的表达式组件起来，形成的复合表达式，表示把有关的过程应用这些数

用前缀表达式来写组合式的优点
1 应用的过程可以带有任意个参数
2 组合式中允许嵌套其他组合式

定义变量
(define name value)

环境：将值与符号关联，而后又可以通过符号来提取这些值，这意味着解释器必须维护某种能力，以便保持有关的名称-值对偶的轨迹
这种存储被称为环境

组合式的求值
工作方式
1 求值该组合式的各个子表达式，其中最左子表达式称为运算符，其它子表达式程序运算对象
2 将运算符的值代表的过程应用于相应的实际参数

复合过程
LISP 里的元素
- 数和算术运算符是基本的数据和过程
- 组合式的嵌套提供了一种组合起多个操作的方法
- 定义是一种受限的抽象手段，它为名字关联相应的值

过程定义
(define (<name> <formal parameters>) <body>)

(define (square x) (* x x))
求值这一定义会创建一个过程，并将这个过程与 square 关联

过程应用的代换模型
对一个过程进行求值的时候，将用户调用过程的实际参数去代替过程定义 body 中的形式参数，再对过程进行求值

正则序求值：完全展开后规约
应用序求值：先求值参数而后应用


采用牛顿法求平方根

函数与过程之间的差异是，函数是在描述一个事情的特征，而过程是在描述如何去做这件事情，
即一个关注的知识的说明性，另一个关注的是知识的行动性

逐步逼近方法
为了求 x 的平方根值，假定对 x 的平方根值有一个猜测值 y，通过执行一个简单的操作来得到一个更好的猜测值，
使得猜测值足够好。
改进猜测值的方法为，求出 y 和 x/y 的平均值，求出的值会越来越接近实际的平方根值


过程作为黑箱抽象
在 平方根 问题里，我们将问题自然的分解为若干个子问题，这里的每一个子问题都是一个可以
清楚表明的工作，可以当作一个独立的过程来看待。

约束变量
一个过程的定义中，所有的形式参数都是约束变量，它们的作用范围只在这个过程体内。

自由变量
如果一个变量是不受约束的，那么就可以说这个变量是自由的


SUMMARY:
首先介绍了作为一门通过的程序设计语言，必须要有的三种机制：基本的表达形式、组合的方法、抽象的方法。
作为本书推荐使用的语言 LISP，其语法简单便捷，为理解程序中的一些基本概念提供了有力的保障。
通过 逐步逼近法 计算 平方根 的问题，说明了过程定义、调用中涉及的变量名约束、作用域等问题。
在 LISP 中，只需要几个简单的语法和递归调用就可以完成其他语言中要用很多概念才能解决的问题


过程和它们所产生的计算 P38

对于如何编写一个程序来说，除了简单的语法层面的问题之外，还必须针对下面几个核心的问题进行学习和掌握
1 编程领域中的各种常见模式
2 值得定义的哪些过程
3 执行一个过程可能产生的结果

线性的递归和迭代

树形递归

实例：换零钱的方式

增长的阶

求幂

最大公约数
欧几里得法：如果 r 是 a 和 b 的余数，那么 a 和 b 的公约数正好也是 b 与 r 的公约数

实例：素数检测

学习了两种检测一个数 n 是否素数的方法。
1 根据以下事实，如果 n 不是素数，它必然有一个小于等于 n 的平方根。这个算法具有θ(n的平方根) 的增长阶

2 费马小定理：如果 n 是一个素数，a 是小于 n 的任意正整数，那么 a 的 n 次方与 a 模 n 同余。这个算法具有 θ(n的对数以2为底) 的增长阶


用高阶函数做抽象 P55

通过定义过程来建立抽象的程序，使得人们可以基于更高级的水平上去工作。
通过在过程中应用不同的过程的操作，提高了程序的抽象能力

1 过程作为参数
2 用lambda 构造过程
3 过程作为一般性的方法
4 过程作为返回值

如何求 x 的 N 次方根的值

1 函数表示 y^n = x; y = x/y^(n-1)

2 阻尼技术，在不动点的搜寻中，作为帮助收敛的手段。
  对于求 N 次方根的过程，计算平均阻尼的次数为 logN

3 通过计算函数的不动点来计算。
  数 x 称为函数 f 的不动点，如果 x 满足方程 f(x) = x