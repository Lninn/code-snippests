(load "tree.scm")

(define list-1 (list 1 3 5 7 9 11))

; ① (partial-tree (list 1 3 5 7 9 11) 5)
;   (left-size 2)
;   (left-result (partial-tree (list 1 3 5 7 9 11) 2))
;                (left-size 0)
;                (left-result (list 1 3 5 7 9 11) 0)
;                ↓
;                (left-result (cons '() (list 1 3 5 7 9 11)))
;                (left-tree '())
;                (non-left-elts (list 1 3 5 7 9 11))
;                (right-size 1)
;                (this-entry 1)
;                (right-result (partial-tree (list 3 5 7 9 11) 1))
;                              (left-size 0)
;                              (left-result (partial-tree (list 3 ... 11) 0))
;                              ↓
;                              (left-result (cons '() (list 3 ... 11)))
;                              (left-tree '())
;                              (non-left-elts (list 3 5 7 9 11))
;                              (right-size 0)
;                              (this-entry 3)
;                              (right-result (partial-tree (list 5 ... 11) 0))
;                              ↓
;                              (right-result (cons '() (list 5 7 9 11)))
;                              (right-tree '())
;                              (remaining-elts (list 5 7 9 11))
;                              (cons (make-tree 3 '() '())
;                                    (list 5 7 9 11))
;                (right-tree (make-tree 3 '() '()))
;                (remaining-elts (list 5 7 9 11))
;                (cons (make-tree 1 '() (make-tree 3 '() '()))
;                      (list 5 7 9 11))
;   (left-tree (make-tree 1 '() (make-tree 3 '() '())))
;   (non-left-elts (list 5 7 9 11))
;   (right-size 2)
;   (this-entry 5)
;   (right-result (partial-tree (list 7 9 11) 2))
;                 (left-size 0)
;                 (left-result (partial-tree (list 7 9 11) 0))
;                 ↓
;                 (list-result (cons '() (list 7 9 11)))
;                 (left-tree '())
;                 (non-left-elts (list 7 9 11))
;                 (right-size 1)
;                 (this-entry 7)
;                 (right-result (partial-tree (list 9 11) 1))
;                               ...
;                               (cons (make-tree 9 '() '())
;                                     (list 11))
;                 (right-tree (make-tree 9 '() '()))
;                 (remaining-elts (list 11))
;                 (cons (make-tree 7 '() (make-tree 9 '() '()))
;                       (list 11))
;   (right-tree (make-tree 7 '() (make-tree 9 '() '())))
;   (remaining-elts 11)
;   (const (make-tree 5 (make-tree 1 '() (make-tree 3 '() '()))
;                       (make-tree 7 '() (make-tree 9 '() '())))
;          (list 11))
;


(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
            (let ((left-tree (car left-result))
                  (non-left-elts (cdr left-result))
                  (right-size (- n (+ left-size 1))))
              (let ((this-entry (car non-left-elts))
                    (right-result (partial-tree (cdr non-left-elts)
                                                right-size)))
                (let ((right-tree (car right-result))
                      (remaining-elts (cdr right-result)))
                  (cons (make-tree this-entry left-tree right-tree)
                        remaining-elts))))))))