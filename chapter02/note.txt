构造数据抽象 P71

本章目的：
    讨论程序语言中所提供的，将各种数据对象组合起来，形成复合数据的方式
    Lisp 中的各种简单数据类型是如何组合成复杂的数据类型的，以代码现实世界中
    各种复杂的问题

为什么需要复合数据：为了提升我们在程序设计时所位于的概念层次，提高设计的模块性，增强语言的表达能力。使我们可以在比语言提供的基本数据类型对象更高的层次上，处理与数据有关的各种问题

1 数据抽象引导

数据抽象：将一个复合数据对象的使用和该数据对象的构造细节隔离

选择函数和构造函数

2 层次性数据和闭包性质

闭包性质：某种组合数据的对象的操作满足闭包性质，那就是说，通过它组合起来的数据对象得到的结果本身还可以通过同样的操作再进行组合

序列作为一种约定的界面
数据结构的设计：使用约定的界面

嵌套映射
给定了自然数 n，找出所有不同的有序对 i 和 j，其中 1 <= j < i <= n, 使得 i + j 是素数

假如给定的数字是 6

1 首先要生成 1 到 6 之间的所有有序对，即 1 2 3 4 5 6，组成的两两有序对

2 然后筛选出满足条件的有序对

生成有序对的一种方式

初始条件： n 为 6，可以组合的数字 1 2 3 4 5 6
对于每个整数 i <= n，枚举出所有的 j < i，并对每一对 i 和 j 生成序对 (i, j)
  
Ⅰ 对序列 (enumerate-interval 1 n) 做一次映射 👉 (1 2 3 4 5 6)，其中每一个数用 i 表示
Ⅱ 对于上一个序列里的每一个 i，要对序列 (enumerate-interval i (- i 1)) 做一次映射
  比如，取上一个序列里的 i 为 4，那么
  (enumerate-interval 1 3) 👉 (1 2 3)
Ⅲ 对于步骤 Ⅱ 中序列中的每个 j，都要生成序列 (list i j)。
Ⅳ 最后，将所有的序对组合起来

当 i = 1 时，没有满足 1 < j < i 的元素
当 i = 2 时，→ (1) → (2, 1)
当 i = 3 时，→ (1 2) → (3, 1) (3, 2)
当 i = 4 时，→ (1 2 3) → (4, 1) (4, 2) (4, 3)
...
当 i = 6 时，→ (1 2 3 4 5) → (6, 1) (6, 2) (6, 3) (6, 4) (6, 5) 

3 符号数据

P144

4 抽象数据的多重表示
5 带有通用类型的操作系统
